SELECT * FROM `sales_retail_stack` WHERE sales_retail_stack.sale_retail_id IN (4001, 4043, 4078, 4194, 4226, 4253, 4315, 4441, 4545, 4643, 4694, 4825, 4853, 4905, 5069, 5175, 3898, 4036, 4044, 4055, 4242, 4306, 4307, 4347, 4362, 4492, 4571, 4594, 4688, 5146, 5149, 5161, 5165, 5166, 5167, 5170, 5184, 5189, 4115, 4180, 4380, 4402, 4403, 4868, 4948, 5007, 5147, 5178, 5181, 5185)
AND taxable_amount < 1000 AND cgst_rate = 6


ALTER TABLE `goods_return_retail` ADD `taxable_amount` DECIMAL(10) NOT NULL AFTER `tax_type`, ADD `cgst_amount` DECIMAL(10,2) NOT NULL AFTER `taxable_amount`, ADD `sgst_amount` DECIMAL(10,2) NOT NULL AFTER `cgst_amount`, ADD `igst_amount` DECIMAL(10,2) NOT NULL AFTER `sgst_amount`;


ALTER TABLE `goods_return_retail` DROP `tax`, DROP `tax_type`, DROP `tax_percentage`;


ALTER TABLE `goods_return_retail` CHANGE `discount_percentage` `discount_rate` INT(11) NULL DEFAULT NULL;


ALTER TABLE `goods_return_retail` ADD `discount_amount` DECIMAL(10,2) NOT NULL AFTER `discount_rate`;



UPDATE goods_return_retail s 
INNER JOIN
(
   SELECT goods_return_id, discount_rate,
   SUM(`selling_price`) as 'billing_amount',
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`discount_amount`) as 'discount_amount',
    SUM(`total`) as 'total'
   FROM goods_return_retail_stack 
   GROUP BY goods_return_id
) ss ON s.id = ss.goods_return_id
SET 
s.billing_amount = ss.billing_amount,
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.discount_rate = ss.discount_rate,
s.discount_amount = ss.discount_amount,
s.total = ss.total
WHERE 1



UPDATE sales_retail s 
INNER JOIN
(
   SELECT sale_retail_id, discount_rate,
   SUM(`selling_price`) as 'billing_amount',
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`discount_amount`) as 'discount_amount',
    SUM(`total`) as 'total'
   FROM sales_retail_stack 
   GROUP BY sale_retail_id
) ss ON s.id = ss.sale_retail_id
SET 
s.billing_amount = ss.billing_amount,
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.discount_rate = ss.discount_rate,
s.discount_amount = ss.discount_amount,
s.total = ss.total
WHERE s.id IN (4001, 4043, 4078, 4194, 4226, 4253, 4315, 4441, 4545, 4643, 4694, 4825, 4853, 4905, 5069, 5175, 3898, 4036, 4044, 4055, 4242, 4306, 4307, 4347, 4362, 4492, 4571, 4594, 4688, 5146, 5149, 5161, 5165, 5166, 5167, 5170, 5184, 5189, 4115, 4180, 4380, 4402, 4403, 4868, 4948, 5007, 5147, 5178, 5181, 5185);





ALTER TABLE `sales` ADD `cancellation_reason` VARCHAR(200) NULL AFTER `status`;
ALTER TABLE `sales_retail` ADD `uniqid` MEDIUMTEXT NULL AFTER `status`;
ALTER TABLE `sales_retail` ADD `cancellation_reason` VARCHAR(200) NULL AFTER `status`;
ALTER TABLE `sales` ADD `cancellation_datetime` TIMESTAMP NULL AFTER `cancellation_reason`;
ALTER TABLE `user_rights` ADD `cancellation_rights` TINYINT NOT NULL DEFAULT '0' AFTER `outlet_order_management`, ADD `editing_rights` TINYINT NOT NULL DEFAULT '0' AFTER `cancellation_rights`;
ALTER TABLE `alteration_stack` ADD `original_sku` VARCHAR(100) NOT NULL AFTER `orignal_barcode`, ADD `altered_sku` VARCHAR(100) NOT NULL AFTER `original_sku`;
ALTER TABLE `new_product_master` ADD INDEX(`barcode`);
ALTER TABLE `inwards` ADD `uniqid` MEDIUMTEXT NULL AFTER `add_to_stock`;

ALTER TABLE `sales`
  DROP `agent_3`,
  DROP `margin_agent_3`,
  DROP `margin_agent_3_percentage`,
  DROP `agent_4`,
  DROP `margin_agent_4`,
  DROP `margin_agent_4_percentage`;

  ALTER TABLE `goods_return`
  DROP `agent_3`,
  DROP `margin_agent_3`,
  DROP `margin_agent_3_percentage`,
  DROP `agent_4`,
  DROP `margin_agent_4`,
  DROP `margin_agent_4_percentage`;


ALTER TABLE `company_settings` ADD `vat_percentage` DECIMAL(10,2) NOT NULL DEFAULT '5.5' AFTER `tally_url`;
ALTER TABLE `company_settings` ADD `cst_with_form` DECIMAL(10,2) NOT NULL DEFAULT '2' AFTER `tally_url`;
ALTER TABLE `company_settings` ADD `cst_without_form` DECIMAL(10,2) NOT NULL DEFAULT '5.5' AFTER `tally_url`;

ALTER TABLE `sales_retail` ADD `sales_person_name` VARCHAR(50) NULL DEFAULT NULL AFTER `note`;
ALTER TABLE `inward_stack` ADD `return_status` TINYINT NOT NULL DEFAULT '0' AFTER `billing_amount`;




ALTER TABLE `sales` ADD `created_by` TINYINT NULL AFTER `updated_by`, ADD `edited_by` TINYINT NULL AFTER `created_by`, ADD `cancelled_by` TINYINT NULL AFTER `edited_by`, ADD `tallied_by` TINYINT NULL AFTER `cancelled_by`;

ALTER TABLE `sales_retail` ADD `created_by` TINYINT NULL AFTER `updated_by`, ADD `edited_by` TINYINT NULL AFTER `created_by`, ADD `cancelled_by` TINYINT NULL AFTER `edited_by`, ADD `tallied_by` TINYINT NULL AFTER `cancelled_by`;

ALTER TABLE `sales_ecommerce` ADD `created_by` TINYINT NULL AFTER `updated_by`, ADD `edited_by` TINYINT NULL AFTER `created_by`, ADD `cancelled_by` TINYINT NULL AFTER `edited_by`, ADD `tallied_by` TINYINT NULL AFTER `cancelled_by`;


ALTER TABLE `sales` ADD `edited_at` TIMESTAMP NULL AFTER `tallied_by`, ADD `cancelled_at` TIMESTAMP NULL AFTER `edited_at`, ADD `tallied_at` TIMESTAMP NULL AFTER `cancelled_at`;

ALTER TABLE `sales_retail` ADD `edited_at` TIMESTAMP NULL AFTER `tallied_by`, ADD `cancelled_at` TIMESTAMP NULL AFTER `edited_at`, ADD `tallied_at` TIMESTAMP NULL AFTER `cancelled_at`;

ALTER TABLE `sales_ecommerce` ADD `edited_at` TIMESTAMP NULL AFTER `tallied_by`, ADD `cancelled_at` TIMESTAMP NULL AFTER `edited_at`, ADD `tallied_at` TIMESTAMP NULL AFTER `cancelled_at`;

ALTER TABLE `sale_stack` ADD `selling_price_without_margin` DECIMAL(10,2) NOT NULL DEFAULT '0' AFTER `selling_price_with_discount`, ADD `margin` DECIMAL(10,2) NOT NULL DEFAULT '0' AFTER `selling_price_without_margin`, ADD `selling_price_with_margin` DECIMAL(10,2) NOT NULL DEFAULT '0' AFTER `margin`;

















ALTER TABLE `stock` ADD `vendor_id` TINYINT NOT NULL DEFAULT '0' AFTER `stock_owner`;
UPDATE `stock` INNER JOIN vendors ON SUBSTR(stock.barcode,1,3) = vendors.prefix
SET
stock.vendor_id = vendors.id

UPDATE `stock`
INNER JOIN new_product_master ON stock.barcode = new_product_master.barcode
SET stock.vendor_id = new_product_master.vendor_id
WHERE 1

SELECT inwards.id, inwards.bill_number, inward_stack.barcode, inward_stack.design, inward_stack.color, inward_stack.size, inwards.add_to_stock, inwards.created_at
FROM `inwards`
INNER JOIN inward_stack ON inwards.id = inward_stack.inward_id
WHERE inwards.created_at > "2016-05-01"
AND inwards.created_at < "2016-05-31"
AND inward_stack.design LIKE "a-%"


SELECT sales_retail.invoice_no, clients.name, sales_retail_stack.barcode, sales_retail.created_at
FROM `sales_retail`
INNER JOIN clients ON clients.id = sales_retail.id_location
INNER JOIN sales_retail_stack ON sales_retail_stack.sale_retail_id = sales_retail.id
WHERE sales_retail.created_at > "2016-08-01"

SELECT approvals.invoice_no, clients.name, approval_stack.barcode, approvals.created_at
FROM `approvals`
INNER JOIN clients ON clients.id = approvals.id_client
INNER JOIN approval_stack ON approval_stack.approval_id = approvals.id
WHERE approvals.created_at > "2016-07-26"
AND clients.type = "outlet"

SELECT approvals.invoice_no, clients.name, approval_stack.barcode, approvals.created_at
FROM `approvals`
INNER JOIN clients ON clients.id = approvals.id_client
INNER JOIN approval_stack ON approval_stack.approval_id = approvals.id
WHERE approvals.created_at > "2016-07-26"
AND clients.type = "outlet"

SET @DATABASE_NAME = 'ibms_kraftiny';

SELECT  CONCAT('ALTER TABLE `', table_name, '` CHANGE `updated_by` `updated_by` INT (10) UNSIGNED NOT NULL;') AS sql_statements
FROM    information_schema.COLUMNS
WHERE COLUMN_NAME IN ('updated_by')
        AND TABLE_SCHEMA=@DATABASE_NAME;

SET @DATABASE_NAME = 'ibms_kraftiny';

SELECT  CONCAT('ALTER TABLE `', table_name, '` ADD INDEX (`updated_by`);') AS sql_statements
FROM    information_schema.COLUMNS
WHERE COLUMN_NAME IN ('updated_by')
        AND TABLE_SCHEMA=@DATABASE_NAME;

SET @DATABASE_NAME = 'ibms_kraftiny';

SELECT  CONCAT('ALTER TABLE `', table_name, '` ADD CONSTRAINT `fk_',table_name,'_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `',@DATABASE_NAME,'`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ; ') AS sql_statements
FROM    information_schema.COLUMNS
WHERE COLUMN_NAME IN ('updated_by')
        AND TABLE_SCHEMA=@DATABASE_NAME;


SET @DATABASE_NAME = 'name_of_your_db';

SELECT  CONCAT('ALTER TABLE `', table_name, '` ENGINE=InnoDB;') AS sql_statements
FROM    information_schema.tables AS tb
WHERE   table_schema = @DATABASE_NAME
AND     `ENGINE` = 'MyISAM'
AND     `TABLE_TYPE` = 'BASE TABLE'
ORDER BY table_name DESC;

ALTER TABLE `agents` ENGINE = InnoDB;
ALTER TABLE `alterations` ENGINE = InnoDB;
ALTER TABLE `alteration_stack` ENGINE = InnoDB;
ALTER TABLE `users` ENGINE = InnoDB;

ALTER TABLE `alterations` CHANGE `updated_by` `updated_by` INT( 10 ) UNSIGNED NOT NULL ;
ALTER TABLE `alterations` ADD INDEX ( `approval_id` ) ;

ALTER TABLE `alteration_stack` ADD INDEX ( `alteration_id` ) ;
ALTER TABLE `agents` ADD CONSTRAINT `fk_agents_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;
ALTER TABLE `alterations` ADD CONSTRAINT `fk_alterations_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;
ALTER TABLE `alteration_stack` ADD INDEX ( `alteration_id` ) ;
ALTER TABLE `alteration_stack` ADD CONSTRAINT `fk_alteration_id` FOREIGN KEY ( `alteration_id` ) REFERENCES `ibms_vamasfashion`.`alterations` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;




ALTER TABLE `approval_stack` ADD INDEX ( `approval_id` ) ;
ALTER TABLE `approval_stack` ENGINE = InnoDB;
ALTER TABLE `approvals` ENGINE = InnoDB;

ALTER TABLE `approval_stack` ADD CONSTRAINT `fk_approval_id` FOREIGN KEY ( `approval_id` ) REFERENCES `ibms_vamasfashion`.`approvals` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `approvals` ADD INDEX ( `updated_by` ) ;

ALTER TABLE `approvals` ADD CONSTRAINT `fk_approvals_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `approvals` ADD CONSTRAINT `fk_approvals_client_id` FOREIGN KEY ( `id_client` ) REFERENCES `ibms_vamasfashion`.`clients` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `approval_return_stack` ADD INDEX ( `approval_return_id` ) ;
ALTER TABLE `approval_return_stack` ENGINE = InnoDB;
ALTER TABLE `approval_return` ENGINE = InnoDB;

ALTER TABLE `approval_return_stack` ADD CONSTRAINT `fk_approval_return_id` FOREIGN KEY ( `approval_return_id` ) REFERENCES `ibms_vamasfashion`.`approvals` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `approval_return` ADD INDEX ( `updated_by` ) ;

ALTER TABLE `approval_return` ADD CONSTRAINT `fk_approval_return_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `approval_return` ADD CONSTRAINT `fk_approval_return_client_id` FOREIGN KEY ( `id_client` ) REFERENCES `ibms_vamasfashion`.`clients` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `clients` ADD INDEX ( `updated_by` ) ;

ALTER TABLE `clients` ADD CONSTRAINT `fk_clients_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `company_accounts` ADD INDEX ( `updated_by` ) ;

ALTER TABLE `company_accounts` ADD CONSTRAINT `fk_company_accounts_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `customers_ecommerce` ADD INDEX ( `updated_by` ) ;

ALTER TABLE `customers_ecommerce` ADD CONSTRAINT `fk_customers_ecommerce_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `customers_retail` ADD INDEX ( `updated_by` ) ;

ALTER TABLE `customers_retail` ADD CONSTRAINT `fk_customers_retail_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;


ALTER TABLE `ecommerce_payments` ADD INDEX ( `updated_by` ) ;
ALTER TABLE `ecommerce_payments` ADD INDEX ( `ecommerce_sale_id` ) ;
ALTER TABLE `ecommerce_payments` CHANGE `ecommerce_sale_id` `ecommerce_sale_id` INT( 10 ) UNSIGNED NOT NULL ;
ALTER TABLE `sales_ecommerce` ENGINE = InnoDB;
ALTER TABLE `ecommerce_payments` CHANGE `updated_by` `updated_by` INT( 10 ) UNSIGNED NOT NULL ;

ALTER TABLE `ecommerce_payments` ADD CONSTRAINT `fk_ecommerce_sale_id` FOREIGN KEY ( `ecommerce_sale_id` ) REFERENCES `ibms_vamasfashion`.`sales_ecommerce` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `ecommerce_payments` ADD CONSTRAINT `fk_ecommerce_payments_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;



ALTER TABLE `goods_return_stack` ADD INDEX ( `goods_return_id` ) ;
ALTER TABLE `goods_return_stack` ENGINE = InnoDB;
ALTER TABLE `goods_return` ENGINE = InnoDB;
ALTER TABLE `goods_return` ADD INDEX ( `updated_by` ) ;
ALTER TABLE `goods_return` ADD CONSTRAINT `fk_goods_return_client_id` FOREIGN KEY ( `id_client` ) REFERENCES `ibms_vamasfashion`.`clients` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `goods_return` ADD CONSTRAINT `fk_goods_return_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;


ALTER TABLE `goods_return_stack` DROP FOREIGN KEY `fk_goods_return_id` ;

ALTER TABLE `goods_return_stack` ADD CONSTRAINT `fk_goods_return_id` FOREIGN KEY ( `goods_return_id` ) REFERENCES `ibms_vamasfashion`.`goods_return` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `goods_return_retail` ADD INDEX ( `updated_by` ) ;

ALTER TABLE `goods_return_retail` ADD CONSTRAINT `fk_goods_return_retail_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `goods_return_retail_stack` ENGINE = InnoDB;
ALTER TABLE `goods_return_retail_stack` ADD INDEX ( `goods_return_id` ) ;

ALTER TABLE `goods_return_retail_stack` ADD CONSTRAINT `fk_goods_return_retail_id` FOREIGN KEY ( `goods_return_id` ) REFERENCES `ibms_vamasfashion`.`goods_return_retail` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `inwards` ENGINE = InnoDB;
ALTER TABLE `inwards` ADD INDEX ( `updated_by` ) ;
ALTER TABLE `inwards` ADD CONSTRAINT `fk_inwards_user_id` FOREIGN KEY ( `updated_by` ) REFERENCES `ibms_vamasfashion`.`users` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;

ALTER TABLE `inward_stack` ENGINE = InnoDB;

ALTER TABLE `inward_stack` ADD CONSTRAINT `fk_inwards_id` FOREIGN KEY ( `inward_id` ) REFERENCES `ibms_vamasfashion`.`inwards` (
`id`
) ON DELETE RESTRICT ON UPDATE CASCADE ;


CREATE VIEW ecommerce_margins AS
   SELECT
  DISTINCT(p.`id`) AS "ecommerce_sale_id",
  ROUND(SUM(pl.payment_amount),2) AS "payment_received",
  ROUND(((p.total - SUM(pl.payment_amount))/p.total)*100,0) AS website_margin
FROM
  `sales_ecommerce` AS p
   INNER JOIN ecommerce_payments AS pl
    ON pl.`ecommerce_sale_id` = p.`id`
   GROUP BY p.`id`
   ORDER By website_margin DESC;


chmod -R u+rwX,go+rX,go-w vamasfashion/

mysql -u [username] -p newdatabase < [database name].sql

mysql -u ibms_ibms -p ibms_vamasfashion < ibms.sql
mysql -u ibms_ibms -p ibms_vamas < inventory.sql

INSERT INTO ibms_kraftiny.new_product_master
(`id`, `barcode`, `design`, `color`, `size`, `manufacturing_price`, `wholesale_price`, `other_website_price`,`discounted_price`, `mrp`, `identifier`, `category`, `active`, `sample`, `updated_by`, `created_at`, `updated_at`)
VALUES
(NEW.id,NEW.barcode,NEW.design,NEW.color,NEW.size,NEW.manufacturing_price,NEW.wholesale_price,NEW.other_website_price,NEW.discounted_price,NEW.mrp,NEW.identifier,NEW.category,NEW.active,NEW.sample,NEW.updated_by,NEW.created_at,NEW.updated_at)


DELETE FROM `goods_return` WHERE created_at > "2016-07-01"

SELECT sale_stack.barcode FROM `sales_ecommerce`
INNER JOIN sales_ecommerce_stack
ON sales_ecommerce.id = sales_ecommerce_stack.ecommerce_sale_id
AND sales_ecommerce.`return_date` >  "2016-04-01" AND sales_ecommerce.return_date < "2016-07-01"
AND sales_ecommerce.wrong_return = 0
SELECT * FROM `goods_return_stack` WHERE created_at> "2016-04-01" AND created_at < "2016-07-01"



UPDATE ibms_vamas.new_product_master SET
`barcode`=NEW.barcode,
`design`=NEW.design,
`color`=NEW.color,
`size`=NEW.size,
`manufacturing_price`=NEW.manufacturing_price,
`wholesale_price`=NEW.wholesale_price,
`other_website_price`=NEW.other_website_price,
`mrp`=NEW.mrp,
`discounted_price`=NEW.discounted_price,
`identifier`=NEW.identifier,
`category`=NEW.category,
`active`=NEW.active,
`sample`=NEW.sample,
`updated_by`=NEW.updated_by,
`created_at`=NEW.created_at,
`updated_at`=NEW.updated_at

where id=NEW.id




CREATE VIEW ecommerce_proper_margins AS
   SELECT
  DISTINCT(p.`id`) AS "ecommerce_sale_id",
  SUM(pl.payment_amount) AS "payment_received",
  ROUND(((p.total - SUM(pl.payment_amount))/p.total)*100,0) AS website_margin
FROM
  `sales_ecommerce` AS p
   INNER JOIN ecommerce_payments AS pl
    ON pl.`ecommerce_sale_id` = p.`id`
WHERE p.status = 1 AND p.return_status =0
   GROUP BY p.`id`
   ORDER By website_margin DESC;




CREATE VIEW ecommerce_margins AS
   SELECT
  DISTINCT(p.`id`) AS "ecommerce_sale_id",
  SUM(pl.payment_amount) AS "payment_received",
  ROUND(((p.total - SUM(pl.payment_amount))/p.total)*100,0) AS website_margin
FROM
  `sales_ecommerce` AS p
   INNER JOIN ecommerce_payments AS pl
    ON pl.`ecommerce_sale_id` = p.`id`
WHERE p.status = 1 AND p.return_status =0
   GROUP BY p.`id`
   ORDER By website_margin DESC;


SELECT
  DISTINCT(p.`id`) AS "ecommerce_sale_id",
  SUM(pl.payment_amount) AS "payment_received",
  ROUND(((p.total - SUM(pl.payment_amount))/p.total)*100,0) AS website_margin
FROM
  `sales_ecommerce` AS p
   INNER JOIN ecommerce_payments AS pl
    ON pl.`ecommerce_sale_id` = p.`id`
WHERE p.status = 1 AND p.return_status =0
   GROUP BY p.`id`
   HAVING  margin > 30
   ORDER By website_margin DESC;


CREATE VIEW ecommerce_high_margins AS
SELECT
  DISTINCT(p.`id`) AS "id",
  SUM(pl.payment_amount) AS "Payment Received",
  ROUND(((p.total - SUM(pl.payment_amount))/p.total)*100,0) AS margin
FROM
  `sales_ecommerce` AS p
   INNER JOIN ecommerce_payments AS pl
    ON pl.`ecommerce_sale_id` = p.`id`
WHERE p.status = 1 AND p.return_status =0
   GROUP BY p.`id`
   HAVING  margin > 30
   ORDER By margin DESC;














CREATE VIEW ecommerce_high_margins AS
SELECT
  DISTINCT(p.`id`) AS "id",
  SUM(pl.payment_amount) AS "Payment Received",
  ROUND(((p.total - SUM(pl.payment_amount))/p.total)*100,0) AS margin
FROM
  `sales_ecommerce` AS p
   INNER JOIN ecommerce_payments AS pl
    ON pl.`ecommerce_sale_id` = p.`id`
WHERE p.status = 1 AND p.return_status =0
   GROUP BY p.`id`
   HAVING  margin > 30
   ORDER By margin DESC;


SELECT
  DISTINCT(p.`id`) AS "ecommerce_sale_id",
  SUM(pl.payment_amount) AS "payment_received",
  ROUND(((p.total - SUM(pl.payment_amount))/p.total)*100,0) AS margin
FROM
  `sales_ecommerce` AS p
   INNER JOIN ecommerce_payments AS pl
    ON pl.`ecommerce_sale_id` = p.`id`
WHERE p.status = 1 AND p.return_status =0
   GROUP BY p.`id`
   HAVING  margin > 25
   ORDER By margin DESC;




SELECT
  DISTINCT(p.`invoice_no`) AS ProductID,
  SUM(pl.payment_amount) AS Cash,
FROM
  `sales_ecommerce` AS p
  LEFT JOIN sales_ecommerce_stack AS pl
    ON pl.`ecommerce_sale_id` = p.`id`
  GROUP BY p.`invoice_no` ;


SELECT
  DISTINCT(p.`id`) AS Sale Id,
  p.invoice_no as Invoice Number,
  SUM(pl.payment_amount) AS Payment Received,
  ((p.total - SUM(pl.payment_amount))/p.total)*100 AS Margin(%)
FROM
  `sales_ecommerce` AS p
   INNER JOIN ecommerce_payments AS pl
    ON pl.`ecommerce_sale_id` = p.`id`
  GROUP BY p.`id` ;

 SELECT
  DISTINCT(p.`id`) AS "Sale Id",
  p.invoice_no as "Invoice Number",
  p.total as "Product Value",
  SUM(pl.payment_amount) AS "Payment Received",
  ROUND(((p.total - SUM(pl.payment_amount))/p.total)*100,0) AS margin
FROM
  `sales_ecommerce` AS p
   INNER JOIN ecommerce_payments AS pl
    ON pl.`ecommerce_sale_id` = p.`id`
WHERE p.status = 1 AND p.return_status =0
   GROUP BY p.`id`
   HAVING  margin > 30
   ORDER By margin DESC
   ;


   SELECT SUM(`quantity`),
SUM(`total`)

FROM `sales_ecommerce` WHERE `website_id`=2 AND `created_at`>"2015-07-01" AND `created_at`<"2015-08-01" AND `status` = 1


SELECT SUM(`quantity`),
SUM(`total`)

FROM `sales_ecommerce` WHERE `website_id`=2 AND `created_at`>"2015-07-01" AND `created_at`<"2015-08-01" AND `return` = 1

SELECT SUM( `quantity` ) , SUM( `total` )
FROM `sales_ecommerce`
INNER JOIN customers_ecommerce ON sales_ecommerce.`ecommerce_customer_id` = customers_ecommerce.id
WHERE sales_ecommerce.website_id =2
AND sales_ecommerce.created_at > "2015-07-01"
AND sales_ecommerce.created_at < "2015-08-01"
AND sales_ecommerce.return =1
AND customers_ecommerce.state != "Maharashtra"

SELECT SUM( `quantity` ) , SUM( `total` )
FROM `sales_ecommerce`
INNER JOIN customers_ecommerce ON sales_ecommerce.`ecommerce_customer_id` = customers_ecommerce.id
WHERE sales_ecommerce.website_id =2
AND sales_ecommerce.created_at > "2015-08-01"
AND sales_ecommerce.created_at < "2015-09-01"
AND sales_ecommerce.return =1
AND customers_ecommerce.state = "Maharashtra"

SELECT SUM( `quantity` ) , SUM( `total` )
FROM `sales_ecommerce`
INNER JOIN customers_ecommerce ON sales_ecommerce.`ecommerce_customer_id` = customers_ecommerce.id
WHERE sales_ecommerce.website_id =2
AND sales_ecommerce.created_at > "2015-10-01"
AND sales_ecommerce.created_at < "2015-11-01"
AND sales_ecommerce.status =1
AND customers_ecommerce.state != "Maharashtra"


//SALE

UPDATE `new_product_master` SET
`discounted_price` = 525

WHERE
`design` IN ("6", "214", "107SL", "107 SL K", "1073/4SL", "107HT", "107NS", "222BR", "222R", "222SL", "81NS", "81PLT", "81SL", "86B", "86BNS", "86BPD", "A", "AJP-30", "AL-K", "CT-1", "CT-2", "CT-3", "CT-4", "MIX-1", "X-113NS", "X-219", "X-18", "X-154", "X-243", "X-243K", "LEC-164", "X-130SL", "X-130SL K", "X-130NS", "X-130NS K", "LEC-104", "LEC-165", "X-271SL", "X-35NS", "X-35SL", "X-49", "X-59", "X-81NS", "X-81NSCRS", "X-115NS", "X-93NS", "X-174", "MIX-1NS", "MIX-3", "X-49N", "81SL.MB", "81SL3/4", "86B-K", "X-193.3/4", "X-193SL")


UPDATE `new_product_master` SET
`discounted_price` = 800

WHERE
`design` IN ("26", "39", "107LB", "KP-4", "KP-5", "KP-62", "KP-8", "M-5", "M-6", "R-5", "R-5SL", "R-6", "X-101NS", "X-101NS2H", "X-101SL", "X-101SL2H", "X-101SL3H", "X-101SL5H", "LEC-164", "CR-11", "CR-11K", "CR-8", "CR-04", "CR-05", "X-107", "X-108NS", "X-116", "X-118", "X-122", "X-128NS", "X-128SL", "X-135", "X-140", "X-141NS", "X-141SL", "X-144", "X-144S", "X-150", "X-151NS", "X-153SL", "X-162NS", "X-166", "X-168", "X-176NS", "X-178", "X-181", "X-181K", "X-183", "LEC-165", "X-169", "CR-06.EFO", "X-94", "X-94SL", "X-191", "X-226", "X-235", "X-244", "X-261", "X-292", "X-307NS", "X-309", "X-315", "X-329", "X-81SL", "X-165", "LEC-162", "X-66", "R-5P", "X-126", "X-131", "X-153NS", "X-104")

UPDATE `new_product_master` SET
`discounted_price` = 1050

WHERE
`design` IN ("X-214", "LEC-174", "LEC-85NS", "X-177", "X-107CRS", "X-110", "X-110F", "X-121", "X-125", "X-134", "X-139", "X-162SL", "X-167", "X-182", "X-186", "X-196", "X-206", "X-224NS", "X-225", "X-230", "X-239", "X-24HF", "X-24", "X-252", "X-253", "X-283", "X-285", "X-316", "X-332", "X-40", "X-48", "X-68", "X-80NS", "X-80SL", "X-114", "231", "JK-06", "JK-07", "JK-08", "JK-11", "JK-17", "JK-18", "KP-22HT", "KP-22NS", "KP-22SL", "KP-55NS", "M-23", "KP-61", "KP-85", "MAYA-9", "X-217", "X-102", "X-24SL", "X-110SL", "X-24NS")

UPDATE `new_product_master` SET
`discounted_price` = 1600
WHERE
`design` IN ("JK-16", "KP-10", "KP-18F", "KP-19", "KP-30", "KP-44SL", "KP-50", "KP-50.EFO", "KP-6", "KP-68", "KP-77", "KP-79", "X-15", "X-185NS", "X-199", "X-220", "X-220.EFO", "X-248", "X-295", "X-296", "X-76", "X-79")


UPDATE `new_product_master` SET
`discounted_price` = 2100
WHERE
`design` IN ("KP-39", "KP-41F", "KP-43F", "KP-43HF", "KP-51", "KP-78", "KP-86", "X-227"
)

UPDATE `new_product_master` SET
`discounted_price` = 2650
WHERE
`design` IN ("KP-23", "KP-24", "KP-25", "KP-38", "KP-40", "KP-42", "KP-46", "KP-47HT", "KP-48", "KP-52", "KP-53", "KP-76NS", "LEC-167", "KP-47SL")

UPDATE `new_product_master` SET
`discounted_price` = 3150
WHERE
`design` IN ("KP-74SL", "KP-80", "KP-82", "KP-98", "JK-04")

UPDATE `new_product_master` SET
`discounted_price` = 4200
WHERE
`design` IN ("KP-56", "KP-57", "KP-57SL", "KP-58", "KP-58SL", "KP-59", "KP-70", "KP-70SL", "KP-64")

ALTER TABLE `goods_return_ecommerce` CHANGE `id` `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT;

SET @i = 2000000;
UPDATE `goods_return` SET `invoice_no` = CONCAT("VFWGR" ,@i:=@i+1)
WHERE created_at > "2017-04-01"


SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VPGR",  DATE_FORMAT(created_at, '%m'), DATE_FORMAT(created_at, '%y'),  @i:=@i+1)
WHERE created_at > "2016-03-01"
AND created_at < "2016-04-01"
AND id_location = 194;

SELECT SUM( quantity )
FROM `stock`
WHERE `party_id` =504

  SET @i = 0;
  UPDATE `stock` SET id = @i:=@i+1
  WHERE 1

SET @i = 1000000;
UPDATE `sales_ecommerce` SET `return_invoice_number` = CONCAT("KRECGR" ,@i:=@i+1)
WHERE return_status = 1 ORDER BY return_received_date

SET @i = 1000000;
UPDATE `goods_return` SET invoice_no = CONCAT("VFGR", @i:=@i+1) WHERE 1 ORDER BY created_at



SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VPGR",  DATE_FORMAT(created_at, '%m'), DATE_FORMAT(created_at, '%y'),  @i:=@i+1)
WHERE created_at > "2016-02-01"
AND created_at < "2016-03-01"
AND id_location = 194;


SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VPGR",  DATE_FORMAT(created_at, '%m'), DATE_FORMAT(created_at, '%y'),  @i:=@i+1)
WHERE created_at > "2016-01-01"
AND created_at < "2016-02-01"
AND id_location = 194;



SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VP/GR/",  DATE_FORMAT(created_at, '%m'),"/", DATE_FORMAT(created_at, '%y'), "/", @i:=@i+1)
WHERE created_at > "2015-12-01"
AND created_at < "2016-01-01"
AND id_location = 194;



SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VP/GR/",  DATE_FORMAT(created_at, '%m'),"/", DATE_FORMAT(created_at, '%y'), "/", @i:=@i+1)
WHERE created_at > "2015-11-01"
AND created_at < "2015-12-01"
AND id_location = 194;

SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VP/GR/",  DATE_FORMAT(created_at, '%m'),"/", DATE_FORMAT(created_at, '%y'), "/", @i:=@i+1)
WHERE created_at > "2015-10-01"
AND created_at < "2015-11-01"
AND id_location = 194;


SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VP/GR/",  DATE_FORMAT(created_at, '%m'),"/", DATE_FORMAT(created_at, '%y'), "/", @i:=@i+1)
WHERE created_at > "2015-09-01"
AND created_at < "2015-10-01"
AND id_location = 194;

SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VP/GR/",  DATE_FORMAT(created_at, '%m'),"/", DATE_FORMAT(created_at, '%y'), "/", @i:=@i+1)
WHERE created_at > "2015-08-01"
AND created_at < "2015-09-01"
AND id_location = 194;

SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VP/GR/",  DATE_FORMAT(created_at, '%m'),"/", DATE_FORMAT(created_at, '%y'), "/", @i:=@i+1)
WHERE created_at > "2015-07-01"
AND created_at < "2015-08-01"
AND id_location = 194;

SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VP/GR/",  DATE_FORMAT(created_at, '%m'),"/", DATE_FORMAT(created_at, '%y'), "/", @i:=@i+1)
WHERE created_at > "2015-06-01"
AND created_at < "2015-07-01"
AND id_location = 194;

SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VP/GR/",  DATE_FORMAT(created_at, '%m'),"/", DATE_FORMAT(created_at, '%y'), "/", @i:=@i+1)
WHERE created_at > "2015-05-01"
AND created_at < "2015-06-01"
AND id_location = 194;

SET @i = 1000;
UPDATE `sales_retail` SET
`invoice_no` = CONCAT( "VP/GR/",  DATE_FORMAT(created_at, '%m'),"/", DATE_FORMAT(created_at, '%y'), "/", @i:=@i+1)
WHERE created_at > "2015-04-01"
AND created_at < "2015-05-01"
AND id_location = 194;

ALTER TABLE `sales_retail_stack` ADD `return_status` TINYINT NOT NULL DEFAULT '0' AFTER `quantity`;
ALTER TABLE `sales_retail` ADD `return_status` TINYINT NOT NULL DEFAULT '0' AFTER `quantity`;
ALTER TABLE `goods_return_retail` ADD `customized` TINYINT NOT NULL DEFAULT '0' AFTER `discount`, ADD `customization_amount` DECIMAL(10,2) NOT NULL DEFAULT '0' AFTER `customized`, ADD `note` VARCHAR(100) NULL AFTER `customization_amount`, ADD `reference_no` VARCHAR(100) NULL AFTER `note`;
ALTER TABLE `goods_return_retail` ADD `gr_type` TINYINT NOT NULL DEFAULT '0' AFTER `quantity`;
ALTER TABLE `alterations` ADD `id_location` INT NOT NULL DEFAULT '0' AFTER `uniqid`;
ALTER TABLE  `goods_return_retail` ADD  `against_sale_retail_id` INT NOT NULL AFTER  `invoice_no` ;
ALTER TABLE `sales_retail` CHANGE `total` `total` DECIMAL(10,2) NOT NULL, CHANGE `tax` `tax` DECIMAL(10,2) NULL DEFAULT NULL;
ALTER TABLE `sales_retail` CHANGE `discount` `discount` DECIMAL(10,2) NULL DEFAULT NULL;

ALTER TABLE `goods_return_retail` CHANGE `total` `total` DECIMAL(10,2) NOT NULL, CHANGE `tax` `tax` DECIMAL(10,2) NULL DEFAULT NULL;
ALTER TABLE `goods_return_retail` CHANGE `discount` `discount` DECIMAL(10,2) NULL DEFAULT NULL;


  SELECT barcode FROM `sales_ecommerce_stack`
INNER JOIN sales_ecommerce  ON
sales_ecommerce.id = sales_ecommerce_stack.`ecommerce_sale_id`
AND sales_ecommerce.return_date < "2016-07-01"
AND sales_ecommerce.return_status = 1
AND sales_ecommerce.wrong_return = 0
UPDATE `sales` SET
discount = 0.40*billing_amount,
discount_percentage = 40,
tax = (billing_amount - discount) * 0.055,
total = billing_amount - discount + tax
WHERE id = 4853
AND created_at < "2016-07-01"

SET @count = 0;
UPDATE `sales_ecommerce_stack` SET `sales_ecommerce_stack`.`id` = @count:= @count + 1;
3349

SET @count = 33500;
UPDATE `sales` SET `sales`.`id` = @count:= @count + 1
WHERE `sales`.`id`>341771;

142943

SET @count = 142943;
UPDATE `sale_stack` SET `sale_stack`.`id` = @count:= @count + 1
WHERE `sale_stack`.`id`>3417710;

SET @count = 142943;
UPDATE `sale_stack` SET `sale_stack`.`id` = @count:= @count + 1
WHERE `sale_stack`.`id`>341770;

UPDATE `goods_return` SET `billing_amount` = `billing_amount` ,
`discount` = `discount_percentage` * 0.01 * `billing_amount` ,
`tax` = `tax_percentage` * 0.01 * ( `billing_amount` - `discount` ) ,
`total` = `billing_amount` - `discount` + `tax` WHERE created_at > "2016-09-17"

UPDATE  goods_return c
        INNER JOIN
        (
            SELECT  goods_return_id,
                    COUNT(*) AS ProductCount
            FROM goods_return_stack
            GROUP BY goods_return_id
        ) p
            ON c.id = p.goods_return_id
SET c.quantity = p.ProductCount
WHERE
c.created_at > "2016-09-17"

UPDATE  goods_return c
        INNER JOIN
        (
            SELECT  goods_return_id,
                    SUM(selling_price_without_discount) AS ProductCount
            FROM goods_return_stack
            GROUP BY goods_return_id
        ) p
            ON c.id = p.goods_return_id
SET c.billing_amount = p.ProductCount
WHERE
c.created_at > "2016-09-17"


SELECT stock.barcode, stock.quantity, new_product_master.design, new_product_master.color, new_product_master.size
FROM stock
INNER JOIN new_product_master ON new_product_master.barcode = stock.barcode

SELECT stock.barcode, stock.quantity, new_product_master.design, new_product_master.color, new_product_master.size
FROM stock
INNER JOIN new_product_master ON new_product_master.barcode = stock.barcode
WHERE `warehouse` =1



$goods_return_date = Carbon::now();
                                            //if ($data[2] != "")
                                             //   $goods_return_date = date("Y-m-d", strtotime(data[2]));

                                            $gr_date = (new Carbon($goods_return_date))->hour(0)->minute(0)->second(0);
                                            $datetime_6_months_old = $gr_date->subMonth(6);
                                            $tt = $datetime_6_months_old;
                                            if (array_key_exists($csv_barcode, $all_barcodes_count_sorted)) {
                                                $count = $all_barcodes_count_sorted[$csv_barcode];
                                                $count_in_db = \App\Models\SaleStack::join('sales', 'sale_stack.sale_id', '=', 'sales.id')->where('sales.created_at', '>=', $datetime_6_months_old)->where('sales.created_at', '<=', $gr_date)->where('return_status', '=', 0)->where('id_client', '=', $client)->where('barcode', '=', $csv_barcode)->orderBy('sales.created_at', 'asc')->count();
                                                if ($count_in_db >= $count) $barcode_information = \App\Models\SaleStack::join('sales', 'sale_stack.sale_id', '=', 'sales.id')->where('sales.created_at', '>=', $datetime_6_months_old)->where('sales.created_at', '<=', $gr_date)->where('return_status', '=', 0)->where('id_client', '=', $client)->where('barcode', '=', $csv_barcode)->orderBy('sales.created_at', 'asc')->first(array('sale_stack.*'));
                                                else $barcode_information = null;
                                            } else $barcode_information = null;

                                            $t = date("Y-m-d", strtotime("-6 month"));
                                            $tt = (new Carbon($t))->hour(0)->minute(0)->second(0);
                                            if (array_key_exists($csv_barcode, $all_barcodes_count_sorted)) {
                                                $count = $all_barcodes_count_sorted[$csv_barcode];
                                                $count_in_db = \App\Models\SaleStack::join('sales', 'sale_stack.sale_id', '=', 'sales.id')->where('sales.created_at', '>=', $tt)->where('return_status', '=', 0)->where('id_client', '=', $client)->where('barcode', '=', $csv_barcode)->orderBy('sales.created_at', 'asc')->count();
                                                if ($count_in_db >= $count) $barcode_information = \App\Models\SaleStack::join('sales', 'sale_stack.sale_id', '=', 'sales.id')->where('sales.created_at', '>=', $tt)->where('return_status', '=', 0)->where('id_client', '=', $client)->where('barcode', '=', $csv_barcode)->orderBy('sales.created_at', 'asc')->first(array('sale_stack.*'));
                                                else $barcode_information = null;
                                            } else $barcode_information = null;



                                            UPDATE `goods_return` SET
created_at = "2016-11-09 16:23:33",
updated_at = "2016-11-09 16:23:33"
WHERE created_at > "2016-11-10";

UPDATE `goods_return_stack` SET
created_at = "2016-11-09 16:23:33",
updated_at = "2016-11-09 16:23:33"
WHERE created_at > "2016-11-10";

UPDATE `sale_stack` SET
updated_at = "2016-11-09 16:23:33"
WHERE updated_at > "2016-11-10"
AND return_status = 1;






                                            UPDATE `goods_return` SET
created_at = "2016-10-27 16:23:33",
updated_at = "2016-10-27 16:23:33"
WHERE id > 295 AND id < 297;

UPDATE `goods_return_stack` SET
created_at = "2016-10-27 16:23:33",
updated_at = "2016-10-27 16:23:33"
WHERE goods_return_id > 295 AND goods_return_id < 297;

UPDATE `sale_stack` SET
updated_at = "2016-10-27 16:23:33"
WHERE id > 295 AND id < 297;
AND return_status = 1;



SELECT approval_return_stack.barcode
FROM `approval_return`
INNER JOIN approval_return_stack ON approval_return.id = approval_return_stack.approval_return_id
WHERE approval_return.created_at > "2016-11-09"
AND approval_return.created_at < "2016-11-10"
AND approval_return.reception =1

SELECT sale_stack.barcode
FROM `sales`
INNER JOIN sale_stack ON sales.id = sale_stack.sale_id
WHERE sales.created_at > "2016-11-10"
AND sales.created_at < "2016-11-11"
AND sales.status =1

SELECT SUM(sale_stack.return_status)
FROM sales
INNER JOIN sale_stack ON sales.id = sale_stack.sale_id
WHERE sales.id_client = 620 AND sales.created_at > "2016-07-01" AND sales.created_at < "2016-10-01"

UPDATE sales
INNER JOIN sale_stack ON sales.id = sale_stack.sale_id
AND sales.id_client = 620 AND sales.created_at > "2016-07-01" AND sales.created_at < "2016-10-01"
SET sale_stack.return_status = 0

UPDATE goods_return o INNER JOIN (
SELECT goods_return_id, SUM( selling_price_without_discount ) 'sumu'
FROM goods_return_stack
GROUP BY goods_return_id
)i ON o.id = i.goods_return_id
SET o.billing_amount = i.sumu WHERE o.id_client =620



ALTER TABLE `user_rights` ADD `ware_debit_notes` TINYINT NOT NULL DEFAULT '0' AFTER `ware_payments`;

CREATE TABLE `debit_notes` (
  `id` int(11) NOT NULL,
  `id_client` int(11) NOT NULL,
  `amount` decimal(10,2) NOT NULL,
  `date_received` date NOT NULL,
  `narration` varchar(100) NOT NULL,
  `additional_description` varchar(200) NOT NULL,
  `tally_sync_count` int(11) NOT NULL DEFAULT '0',
  `tally_sync_date` timestamp NULL DEFAULT NULL,
  `tally_sync_by` tinyint(4) DEFAULT NULL,
  `tally_sync_status` tinyint(4) NOT NULL DEFAULT '0',
  `updated_by` int(10) unsigned NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

ALTER TABLE `sales` ADD `agent_3` INT NULL AFTER `margin_agent_2_percentage` ,
ADD `margin_agent_3` DECIMAL( 10, 2 ) NULL AFTER `agent_3` ,
ADD `margin_agent_3_percentage` DECIMAL( 10, 2 ) NULL AFTER `margin_agent_3` ;
ALTER TABLE `sale_stack` ADD `sale_status` TINYINT NOT NULL DEFAULT '0' AFTER `return_status` ;
ALTER TABLE `local_sales` ADD `billing_date` TIMESTAMP NOT NULL AFTER `updated_by` ;
ALTER TABLE `local_goods_return` ADD `billing_date` TIMESTAMP NOT NULL AFTER `updated_by` ;



SELECT DISTINCT(sales.invoice_no),sales.discount_percentage FROM `sales` INNER JOIN sale_stack ON sales.id = sale_stack.sale_id WHERE sale_stack.design LIKE "%FBB%" 

/* Change discount rate */

UPDATE `sale_stack` SET 
`discount_rate` = 20,
`discount_amount` = ROUND(`selling_price` * 0.01 * `discount_rate`,2),
`taxable_amount` = `selling_price` - `discount_amount`
WHERE sale_id IN (69,70,71,72,132,184,238,239,241,242,243,244,245) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 2.5,
`sgst_rate` = 2.5
WHERE 
taxable_amount < 1000 AND
sale_id IN (69,70,71,72,132,184,238,239,241,242,243,244,245) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 6,
`sgst_rate` = 6
WHERE 
taxable_amount > 1000 AND
sale_id IN (69,70,71,72,132,184,238,239,241,242,243,244,245) ;

UPDATE `sale_stack` SET 
`cgst_amount` = ROUND(`cgst_rate` * 0.01 * `taxable_amount`,2),
`sgst_amount` = ROUND(`sgst_rate` * 0.01 * `taxable_amount`,2),
`igst_amount` = ROUND(`igst_rate` * 0.01 * `taxable_amount`,2)
WHERE sale_id IN (69,70,71,72,132,184,238,239,241,242,243,244,245) ;

UPDATE `sale_stack` SET 
`total` = taxable_amount + cgst_amount + sgst_amount + igst_amount
WHERE sale_id IN (69,70,71,72,132,184,238,239,241,242,243,244,245) ;

UPDATE sales s 
INNER JOIN
(
   SELECT sale_id, discount_rate,
   SUM(`selling_price`) as 'billing_amount',
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`discount_amount`) as 'discount_amount',
    SUM(`total`) as 'total'
   FROM sale_stack 
   GROUP BY sale_id
) ss ON s.id = ss.sale_id
SET 
s.billing_amount = ss.billing_amount,
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.discount_rate = ss.discount_rate,
s.discount_amount = ss.discount_amount,
s.total = ss.total
WHERE s.id IN (69,70,71,72,132,184,238,239,241,242,243,244,245);





ALTER TABLE `sales_group` ADD `sub_tax_type` VARCHAR(50) NULL AFTER `tax_type`;
ALTER TABLE `sales_group` CHANGE `percentage` `percentage` DECIMAL(10,2) NULL DEFAULT NULL;


/home/vamas/public_html/vendor/magento/module-catalog/view/frontend/layout/catalog_product_view.xml






SELECT clients.gst,  clients.name, sales.invoice_no, sales.created_at,  SUM(sale_stack.taxable_amount),SUM(sale_stack.taxable_amount),
sale_stack.cgst_rate, SUM(sale_stack.cgst_amount), sale_stack.sgst_rate, SUM(sale_stack.sgst_amount), sale_stack.igst_rate, SUM(sale_stack.igst_amount),
SUM(sale_stack.total)
FROM `sales` 
INNER JOIN 
sale_stack ON sales.id = sale_stack.sale_id
INNER JOIN clients ON sales.id_client = clients.id
GROUP BY sale_stack.sale_id,sale_stack.cgst_rate,sale_stack.igst_rate


SELECT customers_ecommerce.name,customers_ecommerce.state, sales_ecommerce.invoice_no, sales_ecommerce.created_at,  SUM(sales_ecommerce_stack.taxable_amount),SUM(sales_ecommerce_stack.taxable_amount),
sales_ecommerce_stack.cgst_rate, SUM(sales_ecommerce_stack.cgst_amount), sales_ecommerce_stack.sgst_rate, SUM(sales_ecommerce_stack.sgst_amount), sales_ecommerce_stack.igst_rate, SUM(sales_ecommerce_stack.igst_amount),
SUM(sales_ecommerce_stack.total)
FROM `sales_ecommerce` 
INNER JOIN 
sales_ecommerce_stack ON sales_ecommerce.id = sales_ecommerce_stack.ecommerce_sale_id
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
GROUP BY sales_ecommerce_stack.ecommerce_sale_id,sales_ecommerce_stack.cgst_rate,sales_ecommerce_stack.igst_rate


SELECT customers_retail.name, sales_retail.invoice_no, sales_retail.created_at,  SUM(sales_retail_stack.taxable_amount),
sales_retail_stack.cgst_rate, SUM(sales_retail_stack.cgst_amount), sales_retail_stack.sgst_rate, SUM(sales_retail_stack.sgst_amount),
SUM(sales_retail_stack.total)
FROM `sales_retail` 
INNER JOIN 
sales_retail_stack ON sales_retail.id = sales_retail_stack.sale_retail_id
INNER JOIN customers_retail ON sales_retail.id_customer = customers_retail.id
GROUP BY sales_retail_stack.sale_retail_id,sales_retail_stack.cgst_rate

UPDATE `sale_stack` SET 
`discount_rate` = 0,
`discount_amount` = ROUND(`selling_price` * 0.01 * `discount_rate`,2),
`taxable_amount` = (`selling_price` * quantity) - `discount_amount`
WHERE sale_id IN (127) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 0,
`sgst_rate` = 0,
`igst_rate` = 5
WHERE 
taxable_amount < 1000 AND
sale_id IN (127) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 0,
`sgst_rate` = 0,
`igst_rate` = 5
WHERE 
taxable_amount > 1000 AND
sale_id IN (127) ;

UPDATE `sale_stack` SET 
`cgst_amount` = ROUND(`cgst_rate` * 0.01 * `taxable_amount`,2),
`sgst_amount` = ROUND(`sgst_rate` * 0.01 * `taxable_amount`,2),
`igst_amount` = ROUND(`igst_rate` * 0.01 * `taxable_amount`,2)
WHERE sale_id IN (127) ;

UPDATE `sale_stack` SET 
`total` = taxable_amount + cgst_amount + sgst_amount + igst_amount
WHERE sale_id IN (127) ;

UPDATE sales s 
INNER JOIN
(
   SELECT sale_id, discount_rate,
   SUM(`selling_price`) as 'billing_amount',
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`discount_amount`) as 'discount_amount',
    SUM(`total`) as 'total'
   FROM sale_stack 
   GROUP BY sale_id
) ss ON s.id = ss.sale_id
SET 
s.billing_amount = ss.billing_amount,
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.discount_rate = ss.discount_rate,
s.discount_amount = ss.discount_amount,
s.total = ss.total
WHERE s.id IN (127);


set @bills = '1311';
UPDATE `sale_stack` SET 
`discount_rate` = 15,
`discount_amount` = ROUND(`selling_price` * 0.01 * `discount_rate` * `quantity`,2),
`taxable_amount` = (`selling_price` * quantity) - `discount_amount`
WHERE sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 0,
`sgst_rate` = 0,
`igst_rate` = 5
WHERE 
taxable_amount < 1000 AND
sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 0,
`sgst_rate` = 0,
`igst_rate` = 5
WHERE 
taxable_amount > 1000 AND
sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`cgst_amount` = ROUND(`cgst_rate` * 0.01 * `taxable_amount`,2),
`sgst_amount` = ROUND(`sgst_rate` * 0.01 * `taxable_amount`,2),
`igst_amount` = ROUND(`igst_rate` * 0.01 * `taxable_amount`,2)
WHERE sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`total` = taxable_amount + cgst_amount + sgst_amount + igst_amount
WHERE sale_id IN (@bills) ;

UPDATE sales s 
INNER JOIN
(
   SELECT sale_id, discount_rate,
   SUM(`selling_price` * `quantity`) as 'billing_amount',
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`discount_amount`) as 'discount_amount',
    SUM(`total`) as 'total'
   FROM sale_stack 
   GROUP BY sale_id
) ss ON s.id = ss.sale_id
SET 
s.billing_amount = ss.billing_amount,
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.discount_rate = ss.discount_rate,
s.discount_amount = ss.discount_amount,
s.total = ss.total,
s.against_h_form = 0
WHERE s.id IN (@bills);




set @bills = '263,264';

UPDATE `sale_stack` SET 
`discount_rate` = 40,
`discount_amount` = ROUND((`selling_price` * quantity) * 0.01 * `discount_rate`,2)
WHERE sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`taxable_amount` = (`selling_price` * quantity) - `discount_amount`
WHERE sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 2.5,
`sgst_rate` = 2.5,
`igst_rate` = 0
WHERE 
(selling_price - (`selling_price` * 0.01 *discount_rate)) < 1000 AND
sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 6,
`sgst_rate` = 6,
`igst_rate` = 0
WHERE 
(selling_price - (`selling_price` * 0.01 *discount_rate)) > 1000 AND
sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`cgst_amount` = ROUND(`cgst_rate` * 0.01 * `taxable_amount`,2),
`sgst_amount` = ROUND(`sgst_rate` * 0.01 * `taxable_amount`,2),
`igst_amount` = ROUND(`igst_rate` * 0.01 * `taxable_amount`,2)
WHERE sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`total` = taxable_amount + cgst_amount + sgst_amount + igst_amount
WHERE sale_id IN (@bills) ;

UPDATE sales s 
INNER JOIN
(
   SELECT sale_id, discount_rate,
   SUM(`selling_price`) as 'billing_amount',
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`discount_amount`) as 'discount_amount',
    SUM(`total`) as 'total'
   FROM sale_stack 
   GROUP BY sale_id
) ss ON s.id = ss.sale_id
SET 
s.billing_amount = ss.billing_amount,
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.discount_rate = ss.discount_rate,
s.discount_amount = ss.discount_amount,
s.total = ss.total
WHERE s.id IN (@bills);




UPDATE `sale_stack` SET 
`discount_rate` = 42,
`discount_amount` = ROUND(`selling_price` * 0.01 * `discount_rate`,2),
`taxable_amount` = (`selling_price` * quantity) - `discount_amount`
WHERE sale_id IN (259) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 2.5,
`sgst_rate` = 2.5,
`igst_rate` = 0
WHERE 
(selling_price < 1000 AND
sale_id IN (259) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 6,
`sgst_rate` = 6,
`igst_rate` = 0
WHERE 
selling_price > 1000 AND
sale_id IN (259) ;

UPDATE `sale_stack` SET 
`cgst_amount` = ROUND(`cgst_rate` * 0.01 * `taxable_amount`,2),
`sgst_amount` = ROUND(`sgst_rate` * 0.01 * `taxable_amount`,2),
`igst_amount` = ROUND(`igst_rate` * 0.01 * `taxable_amount`,2)
WHERE sale_id IN (259) ;

UPDATE `sale_stack` SET 
`total` = taxable_amount + cgst_amount + sgst_amount + igst_amount
WHERE sale_id IN (259) ;

UPDATE sales s 
INNER JOIN
(
   SELECT sale_id, discount_rate,
   SUM(`selling_price`) as 'billing_amount',
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`discount_amount`) as 'discount_amount',
    SUM(`total`) as 'total'
   FROM sale_stack 
   GROUP BY sale_id
) ss ON s.id = ss.sale_id
SET 
s.billing_amount = ss.billing_amount,
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.discount_rate = ss.discount_rate,
s.discount_amount = ss.discount_amount,
s.total = ss.total
WHERE s.id IN (259);



UPDATE `sale_stack` SET 
`discount_rate` = 0,
`discount_amount` = ROUND(`selling_price` * 0.01 * `discount_rate`,2),
`taxable_amount` = `selling_price` - `discount_amount`
WHERE sale_id IN (5) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 2.5,
`sgst_rate` = 2.5,
`igst_rate` = 0
WHERE 
taxable_amount < 1000 AND
sale_id IN (5) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 6,
`sgst_rate` = 6,
`igst_rate` = 0
WHERE 
taxable_amount > 1000 AND
sale_id IN (5) ;

UPDATE `sale_stack` SET 
`cgst_amount` = ROUND(`cgst_rate` * 0.01 * `taxable_amount`,2),
`sgst_amount` = ROUND(`sgst_rate` * 0.01 * `taxable_amount`,2),
`igst_amount` = ROUND(`igst_rate` * 0.01 * `taxable_amount`,2)
WHERE sale_id IN (5) ;

UPDATE `sale_stack` SET 
`total` = taxable_amount + cgst_amount + sgst_amount + igst_amount
WHERE sale_id IN (5) ;

UPDATE sales s 
INNER JOIN
(
   SELECT sale_id, discount_rate,
   SUM(`selling_price`) as 'billing_amount',
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`discount_amount`) as 'discount_amount',
    SUM(`total`) as 'total'
   FROM sale_stack 
   GROUP BY sale_id
) ss ON s.id = ss.sale_id
SET 
s.billing_amount = ss.billing_amount,
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.discount_rate = ss.discount_rate,
s.discount_amount = ss.discount_amount,
s.total = ss.total
WHERE s.id IN (5);


<h3><b>POLICIES @ VAMAS (SALE)<b></b></b></h3>
<div class="block custom-block">
<div><em class="fa fa-truck"></em>
<h3>SHIPPING COST</h3>
<p>Additional</p>
</div>
<div><em class="fa fa-dollar"></em>
<h3>Pricing</h3>
<p>All the prices shown are final price removing discounts</p>
</div>
<div><em class="fa fa-dollar"></em>
<h3>Tax</h3>
<p>Extra during sale period</p>
</div>
<div><i class="fa fa-clock-o  fa-lg"></i>
<h3>DELIVERY TIME (SALE)</h3>
<p>On an average 7-8 working days</p>
</div>
<div><i class="fa fa-retweet"></i>
<h3>RETURN POLICY</h3>
<p>7 days only in case of valid reason</p>
</div>
<div><em class="fa fa-life-ring"></em>
<h3>SUPPORT (10:30 to 19:30)</h3>
<p>support@vamas.in</p>
</div>
</div>




CREATE TABLE `goods_return_ecommerce` (
  `id` int(10) unsigned NOT NULL,
  `invoice_no` varchar(50) CHARACTER SET utf8 COLLATE utf8_unicode_ci NOT NULL,
  `ecommerce_sale_id` int(11) NOT NULL,
  `quantity` int(11) NOT NULL,
  `billing_amount` decimal(10,2) NOT NULL,
  `discount_rate` decimal(10,2) NOT NULL,
  `discount_amount` decimal(10,2) NOT NULL,
  `taxable_amount` decimal(10,2) NOT NULL,
  `cgst_amount` decimal(10,2) NOT NULL,
  `sgst_amount` decimal(10,2) NOT NULL,
  `igst_amount` decimal(10,2) NOT NULL,
  `total` decimal(10,2) NOT NULL,
  `tally_sync_date` timestamp NULL DEFAULT NULL,
  `tally_sync_status` tinyint(4) DEFAULT '0',
  `tally_sync_count` int(11) DEFAULT '0',
  `tally_sync_by` tinyint(4) DEFAULT NULL,
  `return_reason` varchar(500) NOT NULL,
  `return_type` varchar(50) NOT NULL,
  `wrong_return` tinyint(4) NOT NULL DEFAULT '0',
  `return_additional_information` varchar(500) NOT NULL,
  `return_field_1` varchar(450) DEFAULT NULL,
  `return_value_1` varchar(450) DEFAULT NULL,
  `return_field_2` varchar(450) DEFAULT NULL,
  `return_value_2` varchar(450) DEFAULT NULL,
  `return_date` timestamp NULL DEFAULT NULL,
  `return_received_date` timestamp NULL DEFAULT NULL,
  `updated_by` int(11) unsigned NOT NULL,
  `created_by` tinyint(4) DEFAULT NULL,
  `edited_by` tinyint(4) DEFAULT NULL,
  `cancelled_by` tinyint(4) DEFAULT NULL,
  `tallied_by` tinyint(4) DEFAULT NULL,
  `edited_at` timestamp NULL DEFAULT NULL,
  `cancelled_at` timestamp NULL DEFAULT NULL,
  `tallied_at` timestamp NULL DEFAULT NULL,
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


CREATE TABLE `goods_return_ecommerce_stack` (
  `id` int(10) unsigned NOT NULL,
  `ecommerce_goods_return_id` int(10) unsigned NOT NULL,
  `barcode` varchar(8) COLLATE utf8_unicode_ci NOT NULL,
  `description` varchar(200) COLLATE utf8_unicode_ci NOT NULL,
  `selling_price` decimal(10,2) NOT NULL,
  `discount_rate` decimal(10,2) NOT NULL,
  `discount_amount` decimal(10,2) NOT NULL,
  `taxable_amount` decimal(10,2) NOT NULL,
  `cgst_rate` decimal(10,2) NOT NULL,
  `cgst_amount` decimal(10,2) NOT NULL,
  `sgst_rate` decimal(10,2) NOT NULL,
  `sgst_amount` decimal(10,2) NOT NULL,
  `igst_rate` decimal(10,2) NOT NULL,
  `igst_amount` decimal(10,2) NOT NULL,
  `tax_amount` decimal(10,2) NOT NULL,
  `total` decimal(10,2) NOT NULL,
  `quantity` int(11) NOT NULL DEFAULT '1',
  `created_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated_at` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00'
) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;


set @bills = '1';
UPDATE local_sales s 
INNER JOIN
(
   SELECT sale_id, discount_rate,
   SUM(`selling_price`) as 'billing_amount',
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`discount_amount`) as 'discount_amount',
    SUM(`total`) as 'total'
   FROM local_sale_stack 
   GROUP BY sale_id
) ss ON s.id = ss.sale_id
SET 
s.billing_amount = ss.billing_amount,
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.discount_rate = ss.discount_rate,
s.discount_amount = ss.discount_amount,
s.total = ss.total
WHERE s.id IN (@bills);

set @bills = '5';

UPDATE `local_sale_stack` SET 
`cgst_rate` = 0,
`sgst_rate` = 0,
`igst_rate` = 5
WHERE 
taxable_amount < 1000 AND
sale_id IN (@bills) ;

UPDATE `local_sale_stack` SET 
`cgst_rate` = 0,
`sgst_rate` = 0,
`igst_rate` = 12
WHERE 
taxable_amount > 1000 AND
sale_id IN (@bills) ;

UPDATE `local_sale_stack` SET 
`cgst_amount` = ROUND(`cgst_rate` * 0.01 * `taxable_amount`,2),
`sgst_amount` = ROUND(`sgst_rate` * 0.01 * `taxable_amount`,2),
`igst_amount` = ROUND(`igst_rate` * 0.01 * `taxable_amount`,2)
WHERE sale_id IN (@bills) ;

UPDATE `local_sale_stack` SET 
`total` = taxable_amount + cgst_amount + sgst_amount + igst_amount
WHERE sale_id IN (@bills) ;

set @bills = '411';

UPDATE `sale_stack` SET 
`discount_rate` = 10,
`discount_amount` = ROUND((`selling_price` * quantity) * 0.01 * `discount_rate`,2)
WHERE sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`taxable_amount` = (`selling_price` * quantity) - `discount_amount`
WHERE sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 0,
`sgst_rate` = 0,
`igst_rate` = 5
WHERE 
(selling_price - (`selling_price` * 0.01 *discount_rate)) < 1000 AND
sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`cgst_rate` = 0,
`sgst_rate` = 0,
`igst_rate` = 12
WHERE 
(selling_price - (`selling_price` * 0.01 * discount_rate)) > 1000 AND
sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`cgst_amount` = ROUND(`cgst_rate` * 0.01 * `taxable_amount`,2),
`sgst_amount` = ROUND(`sgst_rate` * 0.01 * `taxable_amount`,2),
`igst_amount` = ROUND(`igst_rate` * 0.01 * `taxable_amount`,2)
WHERE sale_id IN (@bills) ;

UPDATE `sale_stack` SET 
`total` = taxable_amount + cgst_amount + sgst_amount + igst_amount
WHERE sale_id IN (@bills) ;

UPDATE sales s 
INNER JOIN
(
   SELECT sale_id, discount_rate,
   SUM(`selling_price`) as 'billing_amount',
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`discount_amount`) as 'discount_amount',
    SUM(`total`) as 'total'
   FROM sale_stack 
   GROUP BY sale_id
) ss ON s.id = ss.sale_id
SET 
s.billing_amount = ss.billing_amount,
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.discount_rate = ss.discount_rate,
s.discount_amount = ss.discount_amount,
s.total = ss.total
WHERE s.id IN (@bills);


UPDATE `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
SET 
sales_ecommerce.cgst_amount = round(sales_ecommerce.igst_amount/2,2),
sales_ecommerce.sgst_amount = sales_ecommerce.igst_amount - round(sales_ecommerce.igst_amount/2,2)
WHERE customers_ecommerce.state = "MAHARASHTRA" AND sales_ecommerce.igst_amount > 0;

UPDATE `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
SET 
sales_ecommerce.igst_amount = 0
WHERE customers_ecommerce.state = "MAHARASHTRA" AND sales_ecommerce.igst_amount > 0;

SELECT * FROM `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
WHERE customers_ecommerce.state = "MAHARASHTRA" AND sales_ecommerce.igst_amount > 0



UPDATE `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
SET 
sales_ecommerce_stack.cgst_rate = round(sales_ecommerce_stack.igst_rate/2,2),
sales_ecommerce_stack.sgst_rate = round(sales_ecommerce_stack.igst_rate/2,2),
sales_ecommerce_stack.cgst_amount = round(sales_ecommerce_stack.igst_amount/2,2),
sales_ecommerce_stack.sgst_amount = sales_ecommerce_stack.igst_amount - round(sales_ecommerce_stack.igst_amount/2,2)
WHERE customers_ecommerce.state = "MAHARASHTRA" AND sales_ecommerce_stack.igst_amount > 0;


UPDATE `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
SET 
sales_ecommerce_stack.igst_rate = 0,
sales_ecommerce_stack.igst_amount = 0
WHERE customers_ecommerce.state = "MAHARASHTRA" AND sales_ecommerce_stack.igst_amount > 0;

SELECT * FROM `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
WHERE customers_ecommerce.state = "MAHARASHTRA" AND sales_ecommerce_stack.igst_amount > 0

UPDATE `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
SET 
sales_ecommerce.igst_amount = sales_ecommerce.cgst_amount + sales_ecommerce.sgst_amount
WHERE customers_ecommerce.state != "MAHARASHTRA" AND sales_ecommerce.cgst_amount > 0;

UPDATE `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
SET 
sales_ecommerce.cgst_amount = 0,
sales_ecommerce.sgst_amount = 0
WHERE customers_ecommerce.state != "MAHARASHTRA" AND sales_ecommerce.cgst_amount > 0;

SELECT * FROM `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
WHERE customers_ecommerce.state != "MAHARASHTRA" AND sales_ecommerce.cgst_amount > 0;



UPDATE `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
SET 
sales_ecommerce_stack.cgst_rate = round(sales_ecommerce_stack.igst_rate/2,2),
sales_ecommerce_stack.sgst_rate = round(sales_ecommerce_stack.igst_rate/2,2),
sales_ecommerce_stack.cgst_amount = round(sales_ecommerce_stack.igst_amount/2,2),
sales_ecommerce_stack.sgst_amount = sales_ecommerce_stack.igst_amount - round(sales_ecommerce_stack.igst_amount/2,2)
WHERE customers_ecommerce.state = "MAHARASHTRA" AND sales_ecommerce_stack.igst_amount > 0;


UPDATE `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
SET 
sales_ecommerce_stack.igst_rate = 0,
sales_ecommerce_stack.igst_amount = 0
WHERE customers_ecommerce.state = "MAHARASHTRA" AND sales_ecommerce_stack.igst_amount > 0;

SELECT * FROM `sales_ecommerce` 
INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
WHERE customers_ecommerce.state = "MAHARASHTRA" AND sales_ecommerce_stack.igst_amount > 0


UPDATE `sales_ecommerce_stack` SET 
`igst_amount` = round(0.01*igst_rate*taxable_amount,2),
taxable_amount = total - igst_amount
WHERE `igst_rate` = 12 
AND igst_amount - (0.01*igst_rate*taxable_amount) < -0.1

SELECT * FROM sales_ecommerce_stack
WHERE `igst_rate` = 12 
AND igst_amount - (0.01*igst_rate*taxable_amount) < -0.1


SELECT * FROM sales_ecommerce_stack
WHERE `cgst_rate` = 6 
AND cgst_amount - (0.01*cgst_rate*taxable_amount) < -0.1

UPDATE `sales_ecommerce_stack` SET 
`sgst_amount` = round(0.01*sgst_rate*taxable_amount,2),
taxable_amount = total - sgst_amount
WHERE `sgst_rate` = 6 
AND sgst_amount - (0.01*sgst_rate*taxable_amount) < -0.1

SELECT * FROM `sales_ecommerce_stack`
WHERE taxable_amount < 1000
AND cgst_rate + igst_rate + sgst_rate = 12
AND total < 1050


SELECT sales_ecommerce.invoice_no, sales_ecommerce.created_at, sales_ecommerce_stack.taxable_amount, round(sales_ecommerce_stack.total / (1+sales_ecommerce_stack.igst_rate*0.01),2) AS V, sales_ecommerce_stack.taxable_amount - round(sales_ecommerce_stack.total / (1+sales_ecommerce_stack.igst_rate*0.01),2) AS difference,
sales_ecommerce_stack.total,sales_ecommerce_stack.igst_rate,sales_ecommerce_stack.cgst_rate
FROM `sales_ecommerce` INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id WHERE
sales_ecommerce_stack.igst_rate > 0 AND
sales_ecommerce_stack.taxable_amount - round((sales_ecommerce_stack.total / (1+sales_ecommerce_stack.igst_rate*0.01 )),2) != 0 ORDER BY `sales_ecommerce`.`created_at` 



SELECT sales_ecommerce.invoice_no, sales_ecommerce.created_at, sales_ecommerce_stack.taxable_amount, round(sales_ecommerce_stack.total / (1+sales_ecommerce_stack.igst_rate*0.01),2) AS V, sales_ecommerce_stack.taxable_amount - round(sales_ecommerce_stack.total / (1+sales_ecommerce_stack.igst_rate*0.01),2) AS difference, sales_ecommerce_stack.total,sales_ecommerce_stack.igst_rate,sales_ecommerce_stack.cgst_rate FROM `sales_ecommerce` INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id WHERE sales_ecommerce_stack.cgst_rate > 0 AND sales_ecommerce_stack.taxable_amount - round((sales_ecommerce_stack.total / (1+sales_ecommerce_stack.cgst_rate*2*0.01 )),2) != 0 ORDER BY `sales_ecommerce`.`created_at` 

UPDATE sales_ecommerce_stack
SET 
sales_ecommerce_stack.taxable_amount = round((sales_ecommerce_stack.total / (1+sales_ecommerce_stack.cgst_rate*2*0.01 )),2),

sales_ecommerce_stack.sgst_amount = round(total - (round((sales_ecommerce_stack.total / (1+sales_ecommerce_stack.cgst_rate*2*0.01 )),2)),2),

sales_ecommerce_stack.cgst_amount=total - (round((sales_ecommerce_stack.total / (1+sales_ecommerce_stack.cgst_rate*2*0.01 )),2)) - (round(total - (round((sales_ecommerce_stack.total / (1+sales_ecommerce_stack.cgst_rate*2*0.01 )),2)),2))


WHERE sales_ecommerce_stack.cgst_rate > 0 AND sales_ecommerce_stack.taxable_amount - round((sales_ecommerce_stack.total / (1+sales_ecommerce_stack.cgst_rate*2*0.01 )),2) != 0


SELECT sales_ecommerce.invoice_no, sales_ecommerce.created_at, sales_ecommerce_stack.taxable_amount, round(sales_ecommerce_stack.total / (1+sales_ecommerce_stack.igst_rate*0.01),2) AS V, sales_ecommerce_stack.taxable_amount - round(sales_ecommerce_stack.total / (1+sales_ecommerce_stack.igst_rate*0.01),2) AS difference, sales_ecommerce_stack.total,sales_ecommerce_stack.igst_rate,sales_ecommerce_stack.igst_rate FROM `sales_ecommerce` 

INNER JOIN customers_ecommerce ON sales_ecommerce.ecommerce_customer_id = customers_ecommerce.id 

INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id 

WHERE sales_ecommerce_stack.igst_rate > 0 AND sales_ecommerce_stack.taxable_amount - round((sales_ecommerce_stack.total / (1+sales_ecommerce_stack.igst_rate*0.01 )),2) != 0 ORDER BY `sales_ecommerce`.`created_at` 

UPDATE sales_ecommerce_stack
SET 
sales_ecommerce_stack.taxable_amount = round((sales_ecommerce_stack.total / (1+sales_ecommerce_stack.igst_rate*0.01 )),2),

sales_ecommerce_stack.igst_amount = round(total - (round((sales_ecommerce_stack.total / (1+sales_ecommerce_stack.igst_rate*0.01 )),2)),2)

WHERE sales_ecommerce_stack.igst_rate > 0 AND sales_ecommerce_stack.taxable_amount - round((sales_ecommerce_stack.total / (1+sales_ecommerce_stack.igst_rate*0.01 )),2) != 0


UPDATE sales_ecommerce s 
INNER JOIN
(
   SELECT ecommerce_sale_id,
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`total`) as 'total'
   FROM sales_ecommerce_stack 
   GROUP BY ecommerce_sale_id
) ss ON s.id = ss.ecommerce_sale_id
SET 
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.extra = 1
WHERE s.icgst_amount != ss.igst_amount;


SELECT s.invoice_no, s.created_at,s.taxable_amount,ss.taxable_amount FROM sales_ecommerce s 
INNER JOIN
(
   SELECT ecommerce_sale_id,
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`total`) as 'total'
   FROM sales_ecommerce_stack 
   GROUP BY ecommerce_sale_id
) ss ON s.id = ss.ecommerce_sale_id
WHERE s.igst_amount != ss.igst_amount;


UPDATE sales_ecommerce s 
INNER JOIN
(
   SELECT ecommerce_sale_id,
    SUM(`taxable_amount`) as 'taxable_amount',
    SUM(`cgst_amount`) as 'cgst_amount',
    SUM(`sgst_amount`) as 'sgst_amount',
    SUM(`igst_amount`) as 'igst_amount',
    SUM(`total`) as 'total'
   FROM sales_ecommerce_stack 
   GROUP BY ecommerce_sale_id
) ss ON s.id = ss.ecommerce_sale_id
SET 
s.taxable_amount = ss.taxable_amount,
s.cgst_amount = ss.cgst_amount,
s.sgst_amount = ss.sgst_amount,
s.igst_amount = ss.igst_amount,
s.extra = 1
WHERE s.cgst_amount != ss.cgst_amount;


SELECT sales_retail.invoice_no,sales_retail.created_at
FROM `sales_retail_stack` 
INNER JOIN sales_retail ON sales_retail_stack.sale_retail_id = sales_retail.id
WHERE sales_retail_stack.cgst_amount - sales_retail_stack.sgst_amount > 1

UPDATE `sales_retail_stack` SET 
`cgst_amount` = 57.59,
`sgst_amount` = 57.59
 WHERE cgst_amount - sgst_amount > 1 

 UPDATE `sales_retail` SET 
`cgst_amount` = 57.59,
`sgst_amount` = 57.59
WHERE cgst_amount - sgst_amount > 1
AND quantity = 1

SELECT COUNT(approval_stack.id) FROM `approval_stack` INNER JOIN approvals ON approvals.id = approval_stack.approval_id WHERE approvals.status = 1 AND approval_stack.design LIKE "VF%" AND approvals.created_at > "2017-11-07";

SELECT COUNT(approval_return_stack.id) FROM `approval_return_stack` INNER JOIN approval_return ON approval_return_stack.approval_return_id = approval_return.id WHERE approval_return.status = 1 AND approval_return_stack.design LIKE "VF%" AND approval_return.created_at > "2017-11-07";

SELECT SUM(sale_stack.quantity) FROM `sale_stack` INNER JOIN sales ON sales.id = sale_stack.sale_id WHERE sales.status = 1 AND sale_stack.description LIKE "VF%" AND sales.created_at > "2017-11-07";


SELECT SUM(sale_stack.quantity) FROM `sale_stack` INNER JOIN sales ON sales.id = sale_stack.sale_id WHERE sales.status = 1 AND sale_stack.description LIKE "VF%" AND sales.created_at > "2017-11-06" AND sales.created_at < "2017-11-07";



SELECT * FROM `alteration_stack` 
WHERE created_at > "2017-11-06" AND original_sku LIKE "VF%"


SELECT SUM(quantity) FROM `stock` INNER JOIN new_product_master ON stock.barcode = new_product_master.barcode WHERE stock.warehouse = 1 AND new_product_master.design LIKE "VF%" 


SELECT new_product_master.design,wrong_new_product_master.design,new_product_master.barcode,wrong_new_product_master.created_at,wrong_new_product_master.updated_by 

FROM `new_product_master` 

INNER JOIN wrong_new_product_master ON new_product_master.barcode = wrong_new_product_master.barcode
WHERE new_product_master.design != wrong_new_product_master.design

UPDATE `goods_return_ecommerce` g
INNER JOIN sales_ecommerce s ON g.ecommerce_sale_id = s.id 
SET g.cgst_amount = s.cgst_amount,
g.sgst_amount = s.sgst_amount
WHERE g.cgst_amount != s.cgst_amount

UPDATE `goods_return_ecommerce` g
INNER JOIN sales_ecommerce s ON g.ecommerce_sale_id = s.id 
SET g.igst_amount = s.igst_amount
WHERE g.igst_amount != s.igst_amount




SELECT g.igst_amount,s.igst_amount FROM `goods_return_ecommerce` g
INNER JOIN sales_ecommerce s ON g.ecommerce_sale_id = s.id 
WHERE g.igst_amount != s.igst_amount


SELECT * FROM `goods_return_ecommerce_stack`
INNER JOIN goods_return_ecommerce ON goods_return_ecommerce.id = goods_return_ecommerce_stack.ecommerce_goods_return_id
WHERE goods_return_ecommerce.igst_amount != goods_return_ecommerce_stack.igst_amount

SELECT sales_ecommerce_stack.igst_rate,sales_ecommerce_stack.igst_amount, goods_return_ecommerce_stack.igst_rate,goods_return_ecommerce_stack.igst_amount FROM `goods_return_ecommerce_stack`
INNER JOIN goods_return_ecommerce ON goods_return_ecommerce.id = goods_return_ecommerce_stack.ecommerce_goods_return_id
INNER JOIN sales_ecommerce ON sales_ecommerce.id = goods_return_ecommerce.ecommerce_sale_id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
WHERE goods_return_ecommerce.igst_amount != goods_return_ecommerce_stack.igst_amount


SELECT sales_ecommerce_stack.igst_rate,sales_ecommerce_stack.igst_amount, goods_return_ecommerce_stack.igst_rate,goods_return_ecommerce_stack.igst_amount, sales_ecommerce_stack.taxable_amount FROM `goods_return_ecommerce_stack`
INNER JOIN goods_return_ecommerce ON goods_return_ecommerce.id = goods_return_ecommerce_stack.ecommerce_goods_return_id
INNER JOIN sales_ecommerce ON sales_ecommerce.id = goods_return_ecommerce.ecommerce_sale_id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
WHERE goods_return_ecommerce.igst_amount != goods_return_ecommerce_stack.igst_amount

UPDATE goods_return_ecommerce_stack
INNER JOIN goods_return_ecommerce ON goods_return_ecommerce.id = goods_return_ecommerce_stack.ecommerce_goods_return_id
INNER JOIN sales_ecommerce ON sales_ecommerce.id = goods_return_ecommerce.ecommerce_sale_id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
SET goods_return_ecommerce_stack.igst_rate = sales_ecommerce_stack.igst_rate,
goods_return_ecommerce_stack.igst_amount = sales_ecommerce_stack.igst_amount
WHERE goods_return_ecommerce.igst_amount != goods_return_ecommerce_stack.igst_amount

UPDATE goods_return_ecommerce_stack
INNER JOIN goods_return_ecommerce ON goods_return_ecommerce.id = goods_return_ecommerce_stack.ecommerce_goods_return_id
INNER JOIN sales_ecommerce ON sales_ecommerce.id = goods_return_ecommerce.ecommerce_sale_id
INNER JOIN sales_ecommerce_stack ON sales_ecommerce_stack.ecommerce_sale_id = sales_ecommerce.id
SET goods_return_ecommerce_stack.cgst_rate = sales_ecommerce_stack.cgst_rate,
goods_return_ecommerce_stack.cgst_amount = sales_ecommerce_stack.cgst_amount,
goods_return_ecommerce_stack.sgst_rate = sales_ecommerce_stack.sgst_rate,
goods_return_ecommerce_stack.sgst_amount = sales_ecommerce_stack.sgst_amount
WHERE goods_return_ecommerce.cgst_amount != goods_return_ecommerce_stack.cgst_amount

DELETE 
s FROM `stock` s
INNER JOIN new_product_master n ON s.barcode = n.barcode 
WHERE n.design LIKE "VF%" AND s.warehouse = 1

SELECT SUM(s.quantity) 
FROM `stock` s
INNER JOIN new_product_master n ON s.barcode = n.barcode 
WHERE n.design LIKE "VF-" AND s.warehouse = 1

SELECT SUM(stock.quantity) FROM `stock` INNER JOIN new_product_master ON stock.barcode = new_product_master.barcode WHERE new_product_master.design LIKE "VF-%" AND stock.warehouse = 1 

$j = 5;
$from2 = date("Y-m-d", strtotime("-".$j." day", strtotime("now")));
echo $from2;


SELECT SUM(total) FROM `goods_return` 
WHERE created_at > "2017-07-01" AND created_at < "2017-08-01";
SELECT SUM(total) FROM `goods_return_ecommerce` 
WHERE created_at > "2017-07-01" AND created_at < "2017-08-01";

SELECT SUM(total) FROM `goods_return` 
WHERE created_at > "2017-08-01" AND created_at < "2017-09-01";
SELECT SUM(total) FROM `goods_return_ecommerce` 
WHERE created_at > "2017-08-01" AND created_at < "2017-09-01";

SELECT SUM(total) FROM `goods_return` 
WHERE created_at > "2017-09-01" AND created_at < "2017-10-01";
SELECT SUM(total) FROM `goods_return_ecommerce` 
WHERE created_at > "2017-09-01" AND created_at < "2017-10-01";

SELECT SUM(total) FROM `goods_return` 
WHERE created_at > "2017-10-01" AND created_at < "2017-11-01";
SELECT SUM(total) FROM `goods_return_ecommerce` 
WHERE created_at > "2017-10-01" AND created_at < "2017-11-01";


SELECT SUM(total) FROM `goods_return` 
WHERE created_at > "2017-11-01" AND created_at < "2017-12-01";
SELECT SUM(total) FROM `goods_return_ecommerce` 
WHERE created_at > "2017-11-01" AND created_at < "2017-12-01";


SELECT SUM(total) FROM `goods_return` 
WHERE created_at > "2017-12-01" AND created_at < "2018-01-01";
SELECT SUM(total) FROM `goods_return_ecommerce` 
WHERE created_at > "2017-12-01" AND created_at < "2018-01-01";


SELECT SUM(total) FROM `goods_return` 
WHERE created_at > "2018-01-01" AND created_at < "2018-02-01";
SELECT SUM(total) FROM `goods_return_ecommerce` 
WHERE created_at > "2018-01-01" AND created_at < "2018-02-01";


SELECT SUM(total) FROM `goods_return` 
WHERE created_at > "2018-02-01" AND created_at < "2018-03-01";
SELECT SUM(total) FROM `goods_return_ecommerce` 
WHERE created_at > "2018-02-01" AND created_at < "2018-03-01";









SELECT sale_stack.barcode,sales.invoice_no,sale_stack.quantity,sale_stack.return_status,sale_stack.return_quantity FROM `sale_stack` 
INNER JOIN sales ON sales.id = sale_stack.sale_id
WHERE sales.id_client = 638



SELECT 
sales.created_at,
clients.name,
sales.invoice_no,
sales.quantity,
sales.billing_amount,
sales.ethnicity_amount,
sales.total
FROM `sales`
INNER JOIN clients ON sales.id_client = clients.id
WHERE clients.type LIKE "%Ethnicity%"


SELECT 
sales.created_at,
clients.name,
sales.invoice_no,
sales.quantity,
sales.billing_amount,
sales.discount_amount,
sales.cgst_amount,
sales.sgst_amount,
sales.igst_amount,
sales.total
FROM `sales`
INNER JOIN clients ON sales.id_client = clients.id
WHERE clients.type LIKE "%Ethnicity%"


SELECT 
goods_return.created_at,
clients.name,
goods_return.invoice_no,
goods_return.quantity,
goods_return.billing_amount,
goods_return.discount_amount,
goods_return.cgst_amount,
goods_return.sgst_amount,
goods_return.igst_amount,
goods_return.total
FROM `goods_return`
INNER JOIN clients ON goods_return.id_client = clients.id
WHERE clients.type LIKE "%Ethnicity%"

SELECT 
goods_return.created_at,
clients.name,
goods_return.invoice_no,
goods_return.quantity,
goods_return.billing_amount,
goods_return.ethnicity_amount,
goods_return.tax,
goods_return.total
FROM `goods_return`
INNER JOIN clients ON goods_return.id_client = clients.id
WHERE clients.type LIKE "%Ethnicity%"
AND goods_return.status = 1

UPDATE `goods_return_ecommerce` 
INNER JOIN goods_return_ecommerce_stack ON goods_return_ecommerce.id = goods_return_ecommerce_stack.ecommerce_goods_return_id
SET 
goods_return_ecommerce_stack.taxable_amount = goods_return_ecommerce_stack.total - goods_return_ecommerce_stack.igst_amount,
goods_return_ecommerce.taxable_amount = goods_return_ecommerce.total - goods_return_ecommerce.igst_amount
WHERE 
goods_return_ecommerce_stack.taxable_amount * goods_return_ecommerce_stack.igst_rate != goods_return_ecommerce_stack.igst_amount
AND goods_return_ecommerce_stack.igst_amount > 0

SELECT * FROM `goods_return_ecommerce_stack` WHERE igst_amount != igst_rate * taxable_amount;

SELECT * FROM `sales_ecommerce` 
WHERE billing_amount - `discount_amount` != taxable_amount
AND discount_amount = 0;

UPDATE `goods_return_ecommerce` SET 
`billing_amount` = `taxable_amount`
WHERE billing_amount - `discount_amount` != taxable_amount
AND discount_amount = 0;
